// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://doc.crds.dev/raw/github.com/crossplane/crossplane@v1.19.1

package v1alpha1

import "strings"

// A StoreConfig configures how Crossplane controllers should
// store connection
// details in an external secret store.
#StoreConfig: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "secrets.crossplane.io/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "StoreConfig"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// A StoreConfigSpec defines the desired state of a StoreConfig.
	spec!: #StoreConfigSpec
}

// A StoreConfigSpec defines the desired state of a StoreConfig.
#StoreConfigSpec: {
	// DefaultScope used for scoping secrets for "cluster-scoped"
	// resources.
	// If store type is "Kubernetes", this would mean the default
	// namespace to
	// store connection secrets for cluster scoped resources.
	// In case of "Vault", this would be used as the default parent
	// path.
	// Typically, should be set as Crossplane installation namespace.
	defaultScope!: string
	kubernetes?: {
		// Credentials used to connect to the Kubernetes API.
		auth!: {
			env?: {
				// Name is the name of an environment variable.
				name!: string
			}
			fs?: {
				// Path is a filesystem path.
				path!: string
			}

			// A SecretRef is a reference to a secret key that contains the
			// credentials
			// that must be used to connect to the provider.
			secretRef?: {
				// The key to select.
				key!: string

				// Name of the secret.
				name!: string

				// Namespace of the secret.
				namespace!: string
			}

			// Source of the credentials.
			source!: "None" | "Secret" | "Environment" | "Filesystem"
		}
	}

	// Plugin configures External secret store as a plugin.
	plugin?: {
		// ConfigRef contains store config reference info.
		configRef?: {
			// APIVersion of the referenced config.
			apiVersion!: string

			// Kind of the referenced config.
			kind!: string

			// Name of the referenced config.
			name!: string
		}

		// Endpoint is the endpoint of the gRPC server.
		endpoint?: string
	}

	// Type configures which secret store to be used. Only the
	// configuration
	// block for this store will be used and others will be ignored if
	// provided.
	// Default is Kubernetes.
	type?: "Kubernetes" | "Vault" | "Plugin"
}
