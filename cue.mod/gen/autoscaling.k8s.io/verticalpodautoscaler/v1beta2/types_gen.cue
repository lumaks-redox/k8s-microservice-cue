// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://raw.githubusercontent.com/kubernetes/autoscaler/refs/heads/master/vertical-pod-autoscaler/deploy/vpa-v1-crd-gen.yaml

package v1beta2

import "strings"

// VerticalPodAutoscaler is the configuration for a vertical pod
// autoscaler, which automatically manages pod resources based on
// historical and
// real time resource utilization.
#VerticalPodAutoscaler: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "autoscaling.k8s.io/v1beta2"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "VerticalPodAutoscaler"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// Specification of the behavior of the autoscaler.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	spec!: #VerticalPodAutoscalerSpec
}

// Specification of the behavior of the autoscaler.
// More info:
// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
#VerticalPodAutoscalerSpec: {
	resourcePolicy?: {
		// Per-container resource policies.
		containerPolicies?: [...{
			// Name of the container or DefaultContainerResourcePolicy, in
			// which
			// case the policy is used by the containers that don't have their
			// own
			// policy specified.
			containerName?: string

			// Specifies the maximum amount of resources that will be
			// recommended
			// for the container. The default is no maximum.
			maxAllowed?: close({
				[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
			})

			// Specifies the minimal amount of resources that will be
			// recommended
			// for the container. The default is no minimum.
			minAllowed?: close({
				[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
			})

			// Whether autoscaler is enabled for the container. The default is
			// "Auto".
			mode?: "Auto" | "Off"
		}]
	}

	// TargetRef points to the controller managing the set of pods for
	// the
	// autoscaler to control - e.g. Deployment, StatefulSet.
	// VerticalPodAutoscaler
	// can be targeted at controller implementing scale subresource
	// (the pod set is
	// retrieved from the controller's ScaleStatus) or some well known
	// controllers
	// (e.g. for DaemonSet the pod set is read from the controller's
	// spec).
	// If VerticalPodAutoscaler cannot use specified target it will
	// report
	// ConfigUnsupported condition.
	// Note that VerticalPodAutoscaler does not require full
	// implementation
	// of scale subresource - it will not use it to modify the replica
	// count.
	// The only thing retrieved is a label selector matching pods
	// grouped by
	// the target resource.
	targetRef!: {
		// apiVersion is the API version of the referent
		apiVersion?: string

		// kind is the kind of the referent; More info:
		// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
		kind!: string

		// name is the name of the referent; More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
		name!: string
	}
	updatePolicy?: {
		// Controls when autoscaler applies changes to the pod resources.
		// The default is 'Auto'.
		updateMode?: "Off" | "Initial" | "Recreate" | "Auto"
	}
}
