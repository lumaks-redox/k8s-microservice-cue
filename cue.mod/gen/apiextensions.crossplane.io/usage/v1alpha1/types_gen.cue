// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://doc.crds.dev/raw/github.com/crossplane/crossplane@v1.19.1

package v1alpha1

import "strings"

// A Usage defines a deletion blocking relationship between two
// resources.
//
// Usages prevent accidental deletion of a single resource or
// deletion of
// resources with dependent resources.
//
// Read the Crossplane documentation for
// [more information about
// Compositions](https://docs.crossplane.io/latest/concepts/usages).
#Usage: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "apiextensions.crossplane.io/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "Usage"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// UsageSpec defines the desired state of Usage.
	spec!: #UsageSpec
}

// UsageSpec defines the desired state of Usage.
#UsageSpec: {
	// By is the resource that is "using the other resource".
	by?: {
		// API version of the referent.
		apiVersion?: string

		// Kind of the referent.
		// More info:
		// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
		kind?: string
		resourceRef?: {
			// Name of the referent.
			name!: string
		}

		// Selector to the resource.
		// This field will be ignored if ResourceRef is set.
		resourceSelector?: {
			// MatchControllerRef ensures an object with the same controller
			// reference
			// as the selecting object is selected.
			matchControllerRef?: bool

			// MatchLabels ensures an object with matching labels is selected.
			matchLabels?: close({
				[string]: string
			})
		}
	}

	// Of is the resource that is "being used".
	of!: {
		// API version of the referent.
		apiVersion?: string

		// Kind of the referent.
		// More info:
		// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
		kind?: string
		resourceRef?: {
			// Name of the referent.
			name!: string
		}

		// Selector to the resource.
		// This field will be ignored if ResourceRef is set.
		resourceSelector?: {
			// MatchControllerRef ensures an object with the same controller
			// reference
			// as the selecting object is selected.
			matchControllerRef?: bool

			// MatchLabels ensures an object with matching labels is selected.
			matchLabels?: close({
				[string]: string
			})
		}
	}

	// Reason is the reason for blocking deletion of the resource.
	reason?: string

	// ReplayDeletion will trigger a deletion on the used resource
	// during the deletion of the usage itself, if it was attempted
	// to be deleted at least once.
	replayDeletion?: bool
}
