// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://doc.crds.dev/raw/github.com/crossplane/crossplane@v1.19.1

package v1

import "strings"

// A Provider is the description of a Crossplane Provider package.
#Provider: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "meta.pkg.crossplane.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "Provider"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// ProviderSpec specifies the configuration of a Provider.
	spec!: #ProviderSpec
}

// ProviderSpec specifies the configuration of a Provider.
#ProviderSpec: {
	// Configuration for the packaged Provider's controller.
	controller!: {
		// Image is the packaged Provider controller image.
		image?: string

		// PermissionRequests for RBAC rules required for this provider's
		// controller
		// to function. The RBAC manager is responsible for assessing the
		// requested
		// permissions.
		permissionRequests?: [...{
			// APIGroups is the name of the APIGroup that contains the
			// resources. If multiple API groups are specified, any action
			// requested against one of
			// the enumerated resources in any API group will be allowed. ""
			// represents the core API group and "*" represents all API
			// groups.
			apiGroups?: [...string]

			// NonResourceURLs is a set of partial urls that a user should
			// have access to. *s are allowed, but only as the full, final
			// step in the path
			// Since non-resource URLs are not namespaced, this field is only
			// applicable for ClusterRoles referenced from a
			// ClusterRoleBinding.
			// Rules can either apply to API resources (such as "pods" or
			// "secrets") or non-resource URL paths (such as "/api"), but not
			// both.
			nonResourceURLs?: [...string]

			// ResourceNames is an optional white list of names that the rule
			// applies to. An empty set means that everything is allowed.
			resourceNames?: [...string]

			// Resources is a list of resources this rule applies to. '*'
			// represents all resources.
			resources?: [...string]

			// Verbs is a list of Verbs that apply to ALL the ResourceKinds
			// contained in this rule. '*' represents all verbs.
			verbs!: [...string]
		}]
	}
	crossplane?: {
		// Semantic version constraints of Crossplane that package is
		// compatible with.
		version!: string
	}

	// Dependencies on other packages.
	dependsOn?: [...{
		// APIVersion of the dependency.
		apiVersion?: string

		// Configuration is the name of a Configuration package image.
		// Deprecated: Specify an apiVersion, kind, and package instead.
		configuration?: string

		// Function is the name of a Function package image.
		// Deprecated: Specify an apiVersion, kind, and package instead.
		function?: string

		// Kind of the dependency.
		kind?: string

		// Package OCI reference of the dependency. Only used when
		// apiVersion and
		// kind are set.
		package?: string

		// Provider is the name of a Provider package image.
		// Deprecated: Specify an apiVersion and kind instead.
		provider?: string

		// Version is the semantic version constraints of the dependency
		// image.
		version!: string
	}]
}
