// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.68.0/stripped-down-crds.yaml

package v1alpha1

import (
	"strings"
	"time"
)

#PrometheusAgent: {
	apiVersion: "monitoring.coreos.com/v1alpha1"
	kind:       "PrometheusAgent"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #PrometheusAgentSpec
}
#PrometheusAgentSpec: {
	additionalArgs?: [...{
		name!:  strings.MinRunes(1)
		value?: string
	}]
	additionalScrapeConfigs?: {
		key!:      string
		name?:     string
		optional?: bool
	}
	affinity?: {
		nodeAffinity?: {
			preferredDuringSchedulingIgnoredDuringExecution?: [...{
				preference!: {
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchFields?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
				}
				weight!: int32
			}]
			requiredDuringSchedulingIgnoredDuringExecution?: {
				nodeSelectorTerms!: [...{
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchFields?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
				}]
			}
		}
		podAffinity?: {
			preferredDuringSchedulingIgnoredDuringExecution?: [...{
				podAffinityTerm!: {
					labelSelector?: {
						matchExpressions?: [...{
							key!:      string
							operator!: string
							values?: [...string]
						}]
						matchLabels?: close({
							[string]: string
						})
					}
					namespaceSelector?: {
						matchExpressions?: [...{
							key!:      string
							operator!: string
							values?: [...string]
						}]
						matchLabels?: close({
							[string]: string
						})
					}
					namespaces?: [...string]
					topologyKey!: string
				}
				weight!: int32
			}]
			requiredDuringSchedulingIgnoredDuringExecution?: [...{
				labelSelector?: {
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchLabels?: close({
						[string]: string
					})
				}
				namespaceSelector?: {
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchLabels?: close({
						[string]: string
					})
				}
				namespaces?: [...string]
				topologyKey!: string
			}]
		}
		podAntiAffinity?: {
			preferredDuringSchedulingIgnoredDuringExecution?: [...{
				podAffinityTerm!: {
					labelSelector?: {
						matchExpressions?: [...{
							key!:      string
							operator!: string
							values?: [...string]
						}]
						matchLabels?: close({
							[string]: string
						})
					}
					namespaceSelector?: {
						matchExpressions?: [...{
							key!:      string
							operator!: string
							values?: [...string]
						}]
						matchLabels?: close({
							[string]: string
						})
					}
					namespaces?: [...string]
					topologyKey!: string
				}
				weight!: int32
			}]
			requiredDuringSchedulingIgnoredDuringExecution?: [...{
				labelSelector?: {
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchLabels?: close({
						[string]: string
					})
				}
				namespaceSelector?: {
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchLabels?: close({
						[string]: string
					})
				}
				namespaces?: [...string]
				topologyKey!: string
			}]
		}
	}
	apiserverConfig?: {
		authorization?: {
			credentials?: {
				key!:      string
				name?:     string
				optional?: bool
			}
			credentialsFile?: string
			type?:            string
		}
		basicAuth?: {
			password?: {
				key!:      string
				name?:     string
				optional?: bool
			}
			username?: {
				key!:      string
				name?:     string
				optional?: bool
			}
		}
		bearerToken?:     string
		bearerTokenFile?: string
		host!:            string
		tlsConfig?: {
			ca?: {
				configMap?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				secret?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
			caFile?: string
			cert?: {
				configMap?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				secret?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
			certFile?:           string
			insecureSkipVerify?: bool
			keyFile?:            string
			keySecret?: {
				key!:      string
				name?:     string
				optional?: bool
			}
			serverName?: string
		}
	}
	arbitraryFSAccessThroughSMs?: {
		deny?: bool
	}
	bodySizeLimit?: =~"(^0|([0-9]*[.])?[0-9]+((K|M|G|T|E|P)i?)?B)$"
	configMaps?: [...string]
	containers?: [...{
		args?: [...string]
		command?: [...string]
		env?: [...{
			name!:  string
			value?: string
			valueFrom?: {
				configMapKeyRef?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				fieldRef?: {
					apiVersion?: string
					fieldPath!:  string
				}
				resourceFieldRef?: {
					containerName?: string
					divisor?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
					resource!: string
				}
				secretKeyRef?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
		}]
		envFrom?: [...{
			configMapRef?: {
				name?:     string
				optional?: bool
			}
			prefix?: string
			secretRef?: {
				name?:     string
				optional?: bool
			}
		}]
		image?:           string
		imagePullPolicy?: string
		lifecycle?: {
			postStart?: {
				exec?: {
					command?: [...string]
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name!:  string
						value!: string
					}]
					path?: string
					port!: matchN(>=1, [int, string])
					scheme?: string
				}
				tcpSocket?: {
					host?: string
					port!: matchN(>=1, [int, string])
				}
			}
			preStop?: {
				exec?: {
					command?: [...string]
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name!:  string
						value!: string
					}]
					path?: string
					port!: matchN(>=1, [int, string])
					scheme?: string
				}
				tcpSocket?: {
					host?: string
					port!: matchN(>=1, [int, string])
				}
			}
		}
		livenessProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int32
			grpc?: {
				port!:    int32
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name!:  string
					value!: string
				}]
				path?: string
				port!: matchN(>=1, [int, string])
				scheme?: string
			}
			initialDelaySeconds?: int32
			periodSeconds?:       int32
			successThreshold?:    int32
			tcpSocket?: {
				host?: string
				port!: matchN(>=1, [int, string])
			}
			terminationGracePeriodSeconds?: int64
			timeoutSeconds?:                int32
		}
		name!: string
		ports?: [...{
			containerPort!: int32
			hostIP?:        string
			hostPort?:      int32
			name?:          string
			protocol?:      string
		}]
		readinessProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int32
			grpc?: {
				port!:    int32
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name!:  string
					value!: string
				}]
				path?: string
				port!: matchN(>=1, [int, string])
				scheme?: string
			}
			initialDelaySeconds?: int32
			periodSeconds?:       int32
			successThreshold?:    int32
			tcpSocket?: {
				host?: string
				port!: matchN(>=1, [int, string])
			}
			terminationGracePeriodSeconds?: int64
			timeoutSeconds?:                int32
		}
		resizePolicy?: [...{
			resourceName!:  string
			restartPolicy!: string
		}]
		resources?: {
			claims?: [...{
				name!: string
			}]
			limits?: close({
				[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
			})
			requests?: close({
				[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
			})
		}
		restartPolicy?: string
		securityContext?: {
			allowPrivilegeEscalation?: bool
			capabilities?: {
				add?: [...string]
				drop?: [...string]
			}
			privileged?:             bool
			procMount?:              string
			readOnlyRootFilesystem?: bool
			runAsGroup?:             int64
			runAsNonRoot?:           bool
			runAsUser?:              int64
			seLinuxOptions?: {
				level?: string
				role?:  string
				type?:  string
				user?:  string
			}
			seccompProfile?: {
				localhostProfile?: string
				type!:             string
			}
			windowsOptions?: {
				gmsaCredentialSpec?:     string
				gmsaCredentialSpecName?: string
				hostProcess?:            bool
				runAsUserName?:          string
			}
		}
		startupProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int32
			grpc?: {
				port!:    int32
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name!:  string
					value!: string
				}]
				path?: string
				port!: matchN(>=1, [int, string])
				scheme?: string
			}
			initialDelaySeconds?: int32
			periodSeconds?:       int32
			successThreshold?:    int32
			tcpSocket?: {
				host?: string
				port!: matchN(>=1, [int, string])
			}
			terminationGracePeriodSeconds?: int64
			timeoutSeconds?:                int32
		}
		stdin?:                    bool
		stdinOnce?:                bool
		terminationMessagePath?:   string
		terminationMessagePolicy?: string
		tty?:                      bool
		volumeDevices?: [...{
			devicePath!: string
			name!:       string
		}]
		volumeMounts?: [...{
			mountPath!:        string
			mountPropagation?: string
			name!:             string
			readOnly?:         bool
			subPath?:          string
			subPathExpr?:      string
		}]
		workingDir?: string
	}]
	enableFeatures?: [...string]
	enableRemoteWriteReceiver?:     bool
	enforcedBodySizeLimit?:         =~"(^0|([0-9]*[.])?[0-9]+((K|M|G|T|E|P)i?)?B)$"
	enforcedKeepDroppedTargets?:    int64
	enforcedLabelLimit?:            int64
	enforcedLabelNameLengthLimit?:  int64
	enforcedLabelValueLengthLimit?: int64
	enforcedNamespaceLabel?:        string
	enforcedSampleLimit?:           int64
	enforcedTargetLimit?:           int64
	excludedFromEnforcement?: [...{
		group?:     "monitoring.coreos.com"
		name?:      string
		namespace!: strings.MinRunes(1)
		resource!:  "prometheusrules" | "servicemonitors" | "podmonitors" | "probes" | "scrapeconfigs"
	}]
	externalLabels?: close({
		[string]: string
	})
	externalUrl?: string
	hostAliases?: [...{
		hostnames!: [...string]
		ip!: string
	}]
	hostNetwork?:              bool
	ignoreNamespaceSelectors?: bool
	image?:                    string
	imagePullPolicy?:          "" | "Always" | "Never" | "IfNotPresent"
	imagePullSecrets?: [...{
		name?: string
	}]
	initContainers?: [...{
		args?: [...string]
		command?: [...string]
		env?: [...{
			name!:  string
			value?: string
			valueFrom?: {
				configMapKeyRef?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				fieldRef?: {
					apiVersion?: string
					fieldPath!:  string
				}
				resourceFieldRef?: {
					containerName?: string
					divisor?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
					resource!: string
				}
				secretKeyRef?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
		}]
		envFrom?: [...{
			configMapRef?: {
				name?:     string
				optional?: bool
			}
			prefix?: string
			secretRef?: {
				name?:     string
				optional?: bool
			}
		}]
		image?:           string
		imagePullPolicy?: string
		lifecycle?: {
			postStart?: {
				exec?: {
					command?: [...string]
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name!:  string
						value!: string
					}]
					path?: string
					port!: matchN(>=1, [int, string])
					scheme?: string
				}
				tcpSocket?: {
					host?: string
					port!: matchN(>=1, [int, string])
				}
			}
			preStop?: {
				exec?: {
					command?: [...string]
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name!:  string
						value!: string
					}]
					path?: string
					port!: matchN(>=1, [int, string])
					scheme?: string
				}
				tcpSocket?: {
					host?: string
					port!: matchN(>=1, [int, string])
				}
			}
		}
		livenessProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int32
			grpc?: {
				port!:    int32
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name!:  string
					value!: string
				}]
				path?: string
				port!: matchN(>=1, [int, string])
				scheme?: string
			}
			initialDelaySeconds?: int32
			periodSeconds?:       int32
			successThreshold?:    int32
			tcpSocket?: {
				host?: string
				port!: matchN(>=1, [int, string])
			}
			terminationGracePeriodSeconds?: int64
			timeoutSeconds?:                int32
		}
		name!: string
		ports?: [...{
			containerPort!: int32
			hostIP?:        string
			hostPort?:      int32
			name?:          string
			protocol?:      string
		}]
		readinessProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int32
			grpc?: {
				port!:    int32
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name!:  string
					value!: string
				}]
				path?: string
				port!: matchN(>=1, [int, string])
				scheme?: string
			}
			initialDelaySeconds?: int32
			periodSeconds?:       int32
			successThreshold?:    int32
			tcpSocket?: {
				host?: string
				port!: matchN(>=1, [int, string])
			}
			terminationGracePeriodSeconds?: int64
			timeoutSeconds?:                int32
		}
		resizePolicy?: [...{
			resourceName!:  string
			restartPolicy!: string
		}]
		resources?: {
			claims?: [...{
				name!: string
			}]
			limits?: close({
				[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
			})
			requests?: close({
				[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
			})
		}
		restartPolicy?: string
		securityContext?: {
			allowPrivilegeEscalation?: bool
			capabilities?: {
				add?: [...string]
				drop?: [...string]
			}
			privileged?:             bool
			procMount?:              string
			readOnlyRootFilesystem?: bool
			runAsGroup?:             int64
			runAsNonRoot?:           bool
			runAsUser?:              int64
			seLinuxOptions?: {
				level?: string
				role?:  string
				type?:  string
				user?:  string
			}
			seccompProfile?: {
				localhostProfile?: string
				type!:             string
			}
			windowsOptions?: {
				gmsaCredentialSpec?:     string
				gmsaCredentialSpecName?: string
				hostProcess?:            bool
				runAsUserName?:          string
			}
		}
		startupProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int32
			grpc?: {
				port!:    int32
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name!:  string
					value!: string
				}]
				path?: string
				port!: matchN(>=1, [int, string])
				scheme?: string
			}
			initialDelaySeconds?: int32
			periodSeconds?:       int32
			successThreshold?:    int32
			tcpSocket?: {
				host?: string
				port!: matchN(>=1, [int, string])
			}
			terminationGracePeriodSeconds?: int64
			timeoutSeconds?:                int32
		}
		stdin?:                    bool
		stdinOnce?:                bool
		terminationMessagePath?:   string
		terminationMessagePolicy?: string
		tty?:                      bool
		volumeDevices?: [...{
			devicePath!: string
			name!:       string
		}]
		volumeMounts?: [...{
			mountPath!:        string
			mountPropagation?: string
			name!:             string
			readOnly?:         bool
			subPath?:          string
			subPathExpr?:      string
		}]
		workingDir?: string
	}]
	keepDroppedTargets?:    int64
	labelLimit?:            int64
	labelNameLengthLimit?:  int64
	labelValueLengthLimit?: int64
	listenLocal?:           bool
	logFormat?:             "" | "logfmt" | "json"
	logLevel?:              "" | "debug" | "info" | "warn" | "error"
	minReadySeconds?:       int32
	nodeSelector?: close({
		[string]: string
	})
	overrideHonorLabels?:     bool
	overrideHonorTimestamps?: bool
	paused?:                  bool
	podMetadata?: {
		annotations?: close({
			[string]: string
		})
		labels?: close({
			[string]: string
		})
		name?: string
	}
	podMonitorNamespaceSelector?: {
		matchExpressions?: [...{
			key!:      string
			operator!: string
			values?: [...string]
		}]
		matchLabels?: close({
			[string]: string
		})
	}
	podMonitorSelector?: {
		matchExpressions?: [...{
			key!:      string
			operator!: string
			values?: [...string]
		}]
		matchLabels?: close({
			[string]: string
		})
	}
	podTargetLabels?: [...string]
	portName?:          string
	priorityClassName?: string
	probeNamespaceSelector?: {
		matchExpressions?: [...{
			key!:      string
			operator!: string
			values?: [...string]
		}]
		matchLabels?: close({
			[string]: string
		})
	}
	probeSelector?: {
		matchExpressions?: [...{
			key!:      string
			operator!: string
			values?: [...string]
		}]
		matchLabels?: close({
			[string]: string
		})
	}
	prometheusExternalLabelName?: string
	remoteWrite?: [...{
		authorization?: {
			credentials?: {
				key!:      string
				name?:     string
				optional?: bool
			}
			credentialsFile?: string
			type?:            string
		}
		basicAuth?: {
			password?: {
				key!:      string
				name?:     string
				optional?: bool
			}
			username?: {
				key!:      string
				name?:     string
				optional?: bool
			}
		}
		bearerToken?:     string
		bearerTokenFile?: string
		headers?: close({
			[string]: string
		})
		metadataConfig?: {
			send?:         bool
			sendInterval?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		}
		name?: string
		oauth2?: {
			clientId!: {
				configMap?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				secret?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
			clientSecret!: {
				key!:      string
				name?:     string
				optional?: bool
			}
			endpointParams?: close({
				[string]: string
			})
			scopes?: [...string]
			tokenUrl!: strings.MinRunes(1)
		}
		proxyUrl?: string
		queueConfig?: {
			batchSendDeadline?: string
			capacity?:          int
			maxBackoff?:        string
			maxRetries?:        int
			maxSamplesPerSend?: int
			maxShards?:         int
			minBackoff?:        string
			minShards?:         int
			retryOnRateLimit?:  bool
		}
		remoteTimeout?:        =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		sendExemplars?:        bool
		sendNativeHistograms?: bool
		sigv4?: {
			accessKey?: {
				key!:      string
				name?:     string
				optional?: bool
			}
			profile?: string
			region?:  string
			roleArn?: string
			secretKey?: {
				key!:      string
				name?:     string
				optional?: bool
			}
		}
		tlsConfig?: {
			ca?: {
				configMap?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				secret?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
			caFile?: string
			cert?: {
				configMap?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				secret?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
			certFile?:           string
			insecureSkipVerify?: bool
			keyFile?:            string
			keySecret?: {
				key!:      string
				name?:     string
				optional?: bool
			}
			serverName?: string
		}
		url!: string
		writeRelabelConfigs?: [...{
			action?:      "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual"
			modulus?:     int64
			regex?:       string
			replacement?: string
			separator?:   string
			sourceLabels?: [...=~"^[a-zA-Z_][a-zA-Z0-9_]*$"]
			targetLabel?: string
		}]
	}]
	replicaExternalLabelName?: string
	replicas?:                 int32
	resources?: {
		claims?: [...{
			name!: string
		}]
		limits?: close({
			[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
		})
		requests?: close({
			[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
		})
	}
	routePrefix?: string
	sampleLimit?: int64
	scrapeConfigNamespaceSelector?: {
		matchExpressions?: [...{
			key!:      string
			operator!: string
			values?: [...string]
		}]
		matchLabels?: close({
			[string]: string
		})
	}
	scrapeConfigSelector?: {
		matchExpressions?: [...{
			key!:      string
			operator!: string
			values?: [...string]
		}]
		matchLabels?: close({
			[string]: string
		})
	}
	scrapeInterval?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
	scrapeTimeout?:  =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
	secrets?: [...string]
	securityContext?: {
		fsGroup?:             int64
		fsGroupChangePolicy?: string
		runAsGroup?:          int64
		runAsNonRoot?:        bool
		runAsUser?:           int64
		seLinuxOptions?: {
			level?: string
			role?:  string
			type?:  string
			user?:  string
		}
		seccompProfile?: {
			localhostProfile?: string
			type!:             string
		}
		supplementalGroups?: [...int & int64]
		sysctls?: [...{
			name!:  string
			value!: string
		}]
		windowsOptions?: {
			gmsaCredentialSpec?:     string
			gmsaCredentialSpecName?: string
			hostProcess?:            bool
			runAsUserName?:          string
		}
	}
	serviceAccountName?: string
	serviceMonitorNamespaceSelector?: {
		matchExpressions?: [...{
			key!:      string
			operator!: string
			values?: [...string]
		}]
		matchLabels?: close({
			[string]: string
		})
	}
	serviceMonitorSelector?: {
		matchExpressions?: [...{
			key!:      string
			operator!: string
			values?: [...string]
		}]
		matchLabels?: close({
			[string]: string
		})
	}
	shards?: int32
	storage?: {
		disableMountSubPath?: bool
		emptyDir?: {
			medium?: string
			sizeLimit?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
		}
		ephemeral?: {
			volumeClaimTemplate?: {
				metadata?: {}
				spec!: {
					accessModes?: [...string]
					dataSource?: {
						apiGroup?: string
						kind!:     string
						name!:     string
					}
					dataSourceRef?: {
						apiGroup?:  string
						kind!:      string
						name!:      string
						namespace?: string
					}
					resources?: {
						claims?: [...{
							name!: string
						}]
						limits?: close({
							[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
						})
						requests?: close({
							[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
						})
					}
					selector?: {
						matchExpressions?: [...{
							key!:      string
							operator!: string
							values?: [...string]
						}]
						matchLabels?: close({
							[string]: string
						})
					}
					storageClassName?: string
					volumeMode?:       string
					volumeName?:       string
				}
			}
		}
		volumeClaimTemplate?: {
			apiVersion?: string
			kind?:       string
			metadata?: {
				annotations?: close({
					[string]: string
				})
				labels?: close({
					[string]: string
				})
				name?: string
			}
			spec?: {
				accessModes?: [...string]
				dataSource?: {
					apiGroup?: string
					kind!:     string
					name!:     string
				}
				dataSourceRef?: {
					apiGroup?:  string
					kind!:      string
					name!:      string
					namespace?: string
				}
				resources?: {
					claims?: [...{
						name!: string
					}]
					limits?: close({
						[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
					})
					requests?: close({
						[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
					})
				}
				selector?: {
					matchExpressions?: [...{
						key!:      string
						operator!: string
						values?: [...string]
					}]
					matchLabels?: close({
						[string]: string
					})
				}
				storageClassName?: string
				volumeMode?:       string
				volumeName?:       string
			}
			status?: {
				accessModes?: [...string]
				allocatedResourceStatuses?: close({
					[string]: string
				})
				allocatedResources?: close({
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				})
				capacity?: close({
					[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
				})
				conditions?: [...{
					lastProbeTime?:      time.Time
					lastTransitionTime?: time.Time
					message?:            string
					reason?:             string
					status!:             string
					type!:               string
				}]
				phase?: string
			}
		}
	}
	targetLimit?: int64
	tolerations?: [...{
		effect?:            string
		key?:               string
		operator?:          string
		tolerationSeconds?: int64
		value?:             string
	}]
	topologySpreadConstraints?: [...{
		labelSelector?: {
			matchExpressions?: [...{
				key!:      string
				operator!: string
				values?: [...string]
			}]
			matchLabels?: close({
				[string]: string
			})
		}
		matchLabelKeys?: [...string]
		maxSkew!:            int32
		minDomains?:         int32
		nodeAffinityPolicy?: string
		nodeTaintsPolicy?:   string
		topologyKey!:        string
		whenUnsatisfiable!:  string
	}]
	tracingConfig?: {
		clientType?:  "http" | "grpc"
		compression?: "gzip"
		endpoint!:    strings.MinRunes(1)
		headers?: close({
			[string]: string
		})
		insecure?: bool
		samplingFraction?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
		timeout?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		tlsConfig?: {
			ca?: {
				configMap?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				secret?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
			caFile?: string
			cert?: {
				configMap?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				secret?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
			certFile?:           string
			insecureSkipVerify?: bool
			keyFile?:            string
			keySecret?: {
				key!:      string
				name?:     string
				optional?: bool
			}
			serverName?: string
		}
	}
	version?: string
	volumeMounts?: [...{
		mountPath!:        string
		mountPropagation?: string
		name!:             string
		readOnly?:         bool
		subPath?:          string
		subPathExpr?:      string
	}]
	volumes?: [...{
		awsElasticBlockStore?: {
			fsType?:    string
			partition?: int32
			readOnly?:  bool
			volumeID!:  string
		}
		azureDisk?: {
			cachingMode?: string
			diskName!:    string
			diskURI!:     string
			fsType?:      string
			kind?:        string
			readOnly?:    bool
		}
		azureFile?: {
			readOnly?:   bool
			secretName!: string
			shareName!:  string
		}
		cephfs?: {
			monitors!: [...string]
			path?:       string
			readOnly?:   bool
			secretFile?: string
			secretRef?: {
				name?: string
			}
			user?: string
		}
		cinder?: {
			fsType?:   string
			readOnly?: bool
			secretRef?: {
				name?: string
			}
			volumeID!: string
		}
		configMap?: {
			defaultMode?: int32
			items?: [...{
				key!:  string
				mode?: int32
				path!: string
			}]
			name?:     string
			optional?: bool
		}
		csi?: {
			driver!: string
			fsType?: string
			nodePublishSecretRef?: {
				name?: string
			}
			readOnly?: bool
			volumeAttributes?: close({
				[string]: string
			})
		}
		downwardAPI?: {
			defaultMode?: int32
			items?: [...{
				fieldRef?: {
					apiVersion?: string
					fieldPath!:  string
				}
				mode?: int32
				path!: string
				resourceFieldRef?: {
					containerName?: string
					divisor?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
					resource!: string
				}
			}]
		}
		emptyDir?: {
			medium?: string
			sizeLimit?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
		}
		ephemeral?: {
			volumeClaimTemplate?: {
				metadata?: {}
				spec!: {
					accessModes?: [...string]
					dataSource?: {
						apiGroup?: string
						kind!:     string
						name!:     string
					}
					dataSourceRef?: {
						apiGroup?:  string
						kind!:      string
						name!:      string
						namespace?: string
					}
					resources?: {
						claims?: [...{
							name!: string
						}]
						limits?: close({
							[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
						})
						requests?: close({
							[string]: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
						})
					}
					selector?: {
						matchExpressions?: [...{
							key!:      string
							operator!: string
							values?: [...string]
						}]
						matchLabels?: close({
							[string]: string
						})
					}
					storageClassName?: string
					volumeMode?:       string
					volumeName?:       string
				}
			}
		}
		fc?: {
			fsType?:   string
			lun?:      int32
			readOnly?: bool
			targetWWNs?: [...string]
			wwids?: [...string]
		}
		flexVolume?: {
			driver!: string
			fsType?: string
			options?: close({
				[string]: string
			})
			readOnly?: bool
			secretRef?: {
				name?: string
			}
		}
		flocker?: {
			datasetName?: string
			datasetUUID?: string
		}
		gcePersistentDisk?: {
			fsType?:    string
			partition?: int32
			pdName!:    string
			readOnly?:  bool
		}
		gitRepo?: {
			directory?:  string
			repository!: string
			revision?:   string
		}
		glusterfs?: {
			endpoints!: string
			path!:      string
			readOnly?:  bool
		}
		hostPath?: {
			path!: string
			type?: string
		}
		iscsi?: {
			chapAuthDiscovery?: bool
			chapAuthSession?:   bool
			fsType?:            string
			initiatorName?:     string
			iqn!:               string
			iscsiInterface?:    string
			lun!:               int32
			portals?: [...string]
			readOnly?: bool
			secretRef?: {
				name?: string
			}
			targetPortal!: string
		}
		name!: string
		nfs?: {
			path!:     string
			readOnly?: bool
			server!:   string
		}
		persistentVolumeClaim?: {
			claimName!: string
			readOnly?:  bool
		}
		photonPersistentDisk?: {
			fsType?: string
			pdID!:   string
		}
		portworxVolume?: {
			fsType?:   string
			readOnly?: bool
			volumeID!: string
		}
		projected?: {
			defaultMode?: int32
			sources?: [...{
				configMap?: {
					items?: [...{
						key!:  string
						mode?: int32
						path!: string
					}]
					name?:     string
					optional?: bool
				}
				downwardAPI?: {
					items?: [...{
						fieldRef?: {
							apiVersion?: string
							fieldPath!:  string
						}
						mode?: int32
						path!: string
						resourceFieldRef?: {
							containerName?: string
							divisor?: matchN(>=1, [int, string]) & (number | =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$")
							resource!: string
						}
					}]
				}
				secret?: {
					items?: [...{
						key!:  string
						mode?: int32
						path!: string
					}]
					name?:     string
					optional?: bool
				}
				serviceAccountToken?: {
					audience?:          string
					expirationSeconds?: int64
					path!:              string
				}
			}]
		}
		quobyte?: {
			group?:    string
			readOnly?: bool
			registry!: string
			tenant?:   string
			user?:     string
			volume!:   string
		}
		rbd?: {
			fsType?:  string
			image!:   string
			keyring?: string
			monitors!: [...string]
			pool?:     string
			readOnly?: bool
			secretRef?: {
				name?: string
			}
			user?: string
		}
		scaleIO?: {
			fsType?:           string
			gateway!:          string
			protectionDomain?: string
			readOnly?:         bool
			secretRef!: {
				name?: string
			}
			sslEnabled?:  bool
			storageMode?: string
			storagePool?: string
			system!:      string
			volumeName?:  string
		}
		secret?: {
			defaultMode?: int32
			items?: [...{
				key!:  string
				mode?: int32
				path!: string
			}]
			optional?:   bool
			secretName?: string
		}
		storageos?: {
			fsType?:   string
			readOnly?: bool
			secretRef?: {
				name?: string
			}
			volumeName?:      string
			volumeNamespace?: string
		}
		vsphereVolume?: {
			fsType?:            string
			storagePolicyID?:   string
			storagePolicyName?: string
			volumePath!:        string
		}
	}]
	walCompression?: bool
	web?: {
		httpConfig?: {
			headers?: {
				contentSecurityPolicy?:   string
				strictTransportSecurity?: string
				xContentTypeOptions?:     "" | "NoSniff"
				xFrameOptions?:           "" | "Deny" | "SameOrigin"
				xXSSProtection?:          string
			}
			http2?: bool
		}
		maxConnections?: int32 & >=0
		pageTitle?:      string
		tlsConfig?: {
			cert!: {
				configMap?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				secret?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
			cipherSuites?: [...string]
			client_ca?: {
				configMap?: {
					key!:      string
					name?:     string
					optional?: bool
				}
				secret?: {
					key!:      string
					name?:     string
					optional?: bool
				}
			}
			clientAuthType?: string
			curvePreferences?: [...string]
			keySecret!: {
				key!:      string
				name?:     string
				optional?: bool
			}
			maxVersion?:               string
			minVersion?:               string
			preferServerCipherSuites?: bool
		}
	}
}
